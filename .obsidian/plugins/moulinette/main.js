/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MoulinettePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");

// src/moulinette-entities.ts
var _MoulinetteAsset = class {
  constructor(path) {
    this.path = path;
  }
  getUrl(pack) {
    return `${pack.path}/${this.path}?${pack.sas ? pack.sas : ""}`;
  }
  getType() {
    return _MoulinetteAsset.TYPE_NONE;
  }
  static fromDict(obj) {
    const asset = new _MoulinetteAsset();
    if (typeof obj === "string" || obj instanceof String) {
      asset.path = obj.toString();
      const ext = asset.path.split(".").pop();
      if (["webp"].includes(ext)) {
        return new MoulinetteImage(asset.path);
      } else if (["ogg", "mp3"].includes(ext)) {
        return new MoulinetteSound(asset.path);
      } else if (["md"].includes(ext)) {
        return new MoulinetteText(asset.path);
      }
    } else if (["snd", "md"].includes(obj.type) && obj.path) {
      switch (obj.type) {
        case "snd":
          const sound = new MoulinetteSound(obj.path);
          sound.duration = obj.duration;
          return sound;
        case "md":
          const markdown = new MoulinetteText(obj.path);
          if (obj.meta && obj.meta.description)
            markdown.description = obj.meta.description;
          if (obj.meta && obj.meta.type)
            markdown.type = obj.meta.type;
          if (obj.meta && obj.meta.subtype)
            markdown.subtype = obj.meta.subtype;
          return markdown;
      }
    }
    return null;
  }
};
var MoulinetteAsset = _MoulinetteAsset;
MoulinetteAsset.TYPE_NONE = 0;
MoulinetteAsset.TYPE_IMAGE = 1;
MoulinetteAsset.TYPE_AUDIO = 2;
MoulinetteAsset.TYPE_TEXT = 3;
var MoulinetteImage = class extends MoulinetteAsset {
  getType() {
    return MoulinetteAsset.TYPE_IMAGE;
  }
};
var MoulinetteSound = class extends MoulinetteAsset {
  getType() {
    return MoulinetteAsset.TYPE_AUDIO;
  }
};
var MoulinetteText = class extends MoulinetteAsset {
  getType() {
    return MoulinetteAsset.TYPE_TEXT;
  }
  getUrl(pack) {
    return `/assets/download-asset/SESSIONID/${pack.id}?file=${this.path}&ms=${new Date().getTime()}`;
  }
};
var MoulinettePack = class {
  static fromDict(obj) {
    const pack = new MoulinettePack();
    if (obj.id) {
      pack.id = obj.id;
    }
    if (obj.name) {
      pack.name = obj.name;
    }
    if (obj.path) {
      pack.path = obj.path;
      if (obj.path.endsWith(".git")) {
        pack.packId = obj.path.split("/").pop().slice(0, -4);
      }
    }
    if (obj.sas) {
      pack.sas = obj.sas;
    }
    if (obj.assets) {
      pack.assets = [];
      for (const a of obj.assets) {
        const asset = MoulinetteAsset.fromDict(a);
        if (asset) {
          pack.assets.push(asset);
        }
      }
    }
    return pack;
  }
};
var MoulinetteCreator = class {
  static fromDict(obj) {
    const creator = new MoulinetteCreator();
    if (obj.publisher) {
      creator.name = obj.publisher;
    }
    if (obj.packs) {
      creator.packs = [];
      for (const p of obj.packs) {
        const pack = MoulinettePack.fromDict(p);
        if (pack.assets.length > 0) {
          creator.packs.push(pack);
        }
      }
    }
    return creator;
  }
  static importCreators(obj) {
    if (!obj)
      return [];
    const creators = [];
    for (const c of obj) {
      const creator = MoulinetteCreator.fromDict(c);
      if (creator.packs.length > 0) {
        creators.push(creator);
      }
    }
    return creators;
  }
};

// src/moulinette-client.ts
var import_obsidian = require("obsidian");
var _MoulinetteClient = class {
  /*
   * Sends a request to server and returns the response
   */
  static async requestServer(URI, method, data) {
    let params = { url: `${_MoulinetteClient.SERVER_URL}${URI}`, method, headers: _MoulinetteClient.HEADERS, body: data ? JSON.stringify(data) : void 0 };
    const response = await (0, import_obsidian.requestUrl)(params).catch(function(e) {
      console.error(`MoulinetteClient | Cannot establish connection to server ${_MoulinetteClient.SERVER_URL}`, e);
      return null;
    });
    return response;
  }
  /*
   * Sends a request to server and return the response or null (if server unreachable)
   */
  static async send(URI, method, data) {
    const response = await this.requestServer(URI, method, data);
    if (!response) {
      return null;
    }
    return { "status": response.status, "data": await response.json };
  }
  static async get(URI) {
    return _MoulinetteClient.send(URI, "GET", null);
  }
  static async post(URI, data) {
    return this.send(URI, "POST", data);
  }
  /** ================================================================ */
  /**
   * Retrieves user details (name, tiers, etc.)
   */
  static async getUser(userId, forceRefresh = false) {
    const noCache = "?ms=" + new Date().getTime();
    const refresh = forceRefresh ? "force=1" : "";
    return await _MoulinetteClient.get(`/user/${userId}${noCache}&${refresh}`);
  }
  /**
   * Retrieves user assets (images, markdowns, etc.)
   */
  static async getUserAssets(userId) {
    userId = userId && userId.length == 26 ? userId : "demouser";
    const result = await _MoulinetteClient.get(`/assets/${userId}?client=obsidian&ms=${new Date().getTime()}`);
    if (result && result.status == 200) {
      return MoulinetteCreator.importCreators(result.data);
    } else {
      return [];
    }
  }
};
var MoulinetteClient = _MoulinetteClient;
MoulinetteClient.SERVER_URL = "https://assets.moulinette.cloud";
//static SERVER_URL = "http://127.0.0.1:5000"
MoulinetteClient.HEADERS = { "Accept": "application/json", "Content-Type": "application/json" };
MoulinetteClient.CLIENT_ID = "K3ofcL8XyaObRrO_5VPuzXEPnOVCIW3fbLIt6Vygt_YIM6IKxA404ZQ0pZbZ0VkB";
MoulinetteClient.REMOTE_BASE = "https://mttecloudstorage.blob.core.windows.net";

// src/moulinette-utils.ts
var import_obsidian2 = require("obsidian");
var _MoulinetteUtils = class {
  // https://upload.wikimedia.org/wikipedia/commons/4/48/Markdown-mark.svg
  // https://yoksel.github.io/url-encoder/
  //static IMAGE_ICON = `data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="%23FFF" d="M448 80c8.8 0 16 7.2 16 16V415.8l-5-6.5-136-176c-4.5-5.9-11.6-9.3-19-9.3s-14.4 3.4-19 9.3L202 340.7l-30.5-42.7C167 291.7 159.8 288 152 288s-15 3.7-19.5 10.1l-80 112L48 416.3l0-.3V96c0-8.8 7.2-16 16-16H448zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm80 192a48 48 0 1 0 0-96 48 48 0 1 0 0 96z"/></svg>`
  //static TEXT_ICON = `data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="208" height="128" viewBox="0 0 208 128"><rect width="198" height="118" x="5" y="5" ry="10" stroke="%23FFF" stroke-width="10" fill="%23FFF"/><path d="M30 98V30h20l20 25 20-25h20v68H90V59L70 84 50 59v39zm125 0l-30-33h20V30h20v35h20z"/></svg>`
  //static AUDIO_ICON = `data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="500" height="500" viewBox="0 0 75 75"><path d="M39.389,13.769 L22.235,28.606 L6,28.606 L6,47.699 L21.989,47.699 L39.389,62.75 L39.389,13.769z" style="stroke:%23FFF;stroke-width:5;stroke-linejoin:round;fill:%23FFF;"/><path d="M48,27.6a19.5,19.5 0 0 1 0,21.4M55.1,20.5a30,30 0 0 1 0,35.6M61.6,14a38.8,38.8 0 0 1 0,48.6" style="fill:none;stroke:%23FFF;stroke-width:5;stroke-linecap:round"/></svg>`
  /**
   * Improves name (originally a filepath) by replacing separators
   */
  static beautifyName(name) {
    name = name.replace(/[_-]/g, " ");
    name = name.indexOf(".") > 0 ? name.substring(0, name.indexOf(".")) : name;
    name = name.split(" ").map((word) => {
      return word.length < 2 ? word : word[0].toUpperCase() + word.substring(1);
    }).join(" ");
    return name;
  }
  /**
   * This utility function downloads a remote image (from Moulinette Cloud)
   * Into a specific folder (under /moulinette)
   * 
   * @param vault current Vault
   * @param url image URL
   * @returns image path within the vault
   */
  static async downloadFile(vault, url) {
    let imagePath = url;
    if (url.startsWith(MoulinetteClient.REMOTE_BASE)) {
      imagePath = _MoulinetteUtils.PREFIX + url.substring(MoulinetteClient.REMOTE_BASE.length + 1, url.lastIndexOf("?"));
    } else if (url.startsWith(MoulinetteClient.SERVER_URL)) {
      const idx = url.lastIndexOf("?file=");
      if (idx > 0) {
        imagePath = _MoulinetteUtils.PREFIX + url.split("?file=")[1];
      } else {
        console.warn(`Invalid URL: ${url}`);
        return null;
      }
    }
    const folderPath = imagePath.substring(0, imagePath.lastIndexOf("/"));
    if (!await vault.adapter.exists((0, import_obsidian2.normalizePath)(folderPath))) {
      vault.createFolder(folderPath);
    }
    if (!await vault.adapter.exists((0, import_obsidian2.normalizePath)(imagePath))) {
      await (0, import_obsidian2.requestUrl)(url).then((response) => {
        if (response.status != 200) {
          throw new Error(`HTTP ${response.status} - ${response.text}`);
        }
        return response.arrayBuffer;
      }).then((buffer) => {
        vault.createBinary(imagePath, buffer);
      }).catch((err) => {
        console.error("Moulinette | Couldn't download the image!", err);
        return null;
      });
    } else {
      console.warn("Moulinette | File already exists. ", imagePath);
    }
    return imagePath;
  }
  /**
   * This utility function downloads a markdown content (from Moulinette Cloud)
   * 
   * @param vault current vault
   * @param creators cached creators
   * @param url markdown URL
   * @returns markdown content
   */
  static async downloadMarkdown(plugin, uri) {
    let markdownContent = "";
    const sessionId = plugin.settings.sessionID ? plugin.settings.sessionID : "demo-user";
    await MoulinetteClient.requestServer(uri.replace("SESSIONID", sessionId), "get", null).then((response) => {
      if (!response) {
        throw new Error(`Error during request`);
      }
      if (response.status != 200) {
        throw new Error(`HTTP ${response.status} - ${response.text}`);
      }
      return response.text;
    }).then((text) => {
      markdownContent = text;
    }).catch((err) => {
      console.error("Moulinette | Couldn't download the markdown!", err);
    });
    return await _MoulinetteUtils.downloadDependencies(plugin, markdownContent);
  }
  /**
   * Checks the entire markdown content for references ![[some URL]]
   * Download the references if exist on Moulinette
   * 
   * @param vault current vault
   * @param creators  cached creators
   * @param markdown markdown content
   */
  static async downloadDependencies(plugin, markdown) {
    let newMarkdown = markdown;
    const matches = markdown.matchAll(/(\!?)\[\[([^\]]+)\]\]/g);
    for (const match of matches) {
      const refMark = match[1];
      let assetPath = match[2];
      const creators = await plugin.getCreators();
      if (assetPath.startsWith(_MoulinetteUtils.PREFIX)) {
        assetPath = assetPath.substring(_MoulinetteUtils.PREFIX.length);
        const creatorPath = assetPath.split("/")[0];
        const pack = assetPath.split("/")[1];
        const baseURL = `${creatorPath}/${pack}`;
        for (const c of creators) {
          const pack2 = c.packs.find((p) => p.path.endsWith(baseURL));
          if (pack2) {
            if (refMark == "!") {
              const url = `${pack2.path}${assetPath.replace(baseURL, "")}?${pack2.sas ? pack2.sas : ""}`;
              await _MoulinetteUtils.downloadFile(plugin.app.vault, url);
            }
          }
        }
      } else {
        const packId = assetPath.split("/")[0];
        for (const c of creators) {
          const pack = c.packs.find((p) => p.packId == packId);
          if (pack) {
            let path = null;
            if (refMark == "!") {
              const sessionId = plugin.settings.sessionID ? plugin.settings.sessionID : "demo-user";
              const url = `${MoulinetteClient.SERVER_URL}/assets/download-asset/${sessionId}/${pack.id}?file=${assetPath}&ms=${new Date().getTime()}`;
              path = await _MoulinetteUtils.downloadFile(plugin.app.vault, url);
            } else {
              path = _MoulinetteUtils.PREFIX + (assetPath.startsWith("/") ? assetPath.substring(1) : assetPath);
            }
            if (path) {
              newMarkdown = newMarkdown.replace(match[0], `${refMark}[[${path}]]`);
              break;
            }
          }
        }
      }
    }
    return newMarkdown;
  }
  /**
   * Converts a duration into a string representation
   * @param duration duration as number of seconds
   * @returns string representation of the duration (65 sec = 1:05)
   */
  static formatDuration(duration) {
    const durHr = Math.floor(duration / 3600);
    const durMin = Math.floor((duration - 3600 * durHr) / 60);
    const durSec = duration % 60;
    return (durHr > 0 ? `${durHr}:${durMin.toString().padStart(2, "0")}` : durMin.toString()) + ":" + durSec.toString().padStart(2, "0");
  }
  /**
   * Merge packs with same name
   */
  static combinePacks(packs) {
    let newPacks = {};
    for (const p of packs) {
      let name = p.name.trim();
      if (name.endsWith("HD") || name.endsWith("4K")) {
        name = name.slice(0, -2).trim();
      }
      name = name.replace(/\([^\)]+\)/g, "").trim();
      if (name in newPacks) {
        newPacks[name].push(p);
      } else {
        newPacks[name] = [p];
      }
    }
    return newPacks;
  }
};
var MoulinetteUtils = _MoulinetteUtils;
MoulinetteUtils.PREFIX = "moulinette/";

// src/moulinette-results.ts
var import_obsidian3 = require("obsidian");
var MoulinetteAssetResult = class {
  // additional metadata
  /**
   * Generates a Result instance from a given entity
   */
  static fromEntity(a, p, c) {
    const res = new MoulinetteAssetResult();
    res.name = MoulinetteUtils.beautifyName(a.path.split("/").pop() || "");
    res.pack = p.name;
    res.creator = c.name;
    res.ref = a;
    if (a instanceof MoulinetteImage) {
      res.url = a.getUrl(p);
      res.thumbUrl = `${p.path}/${a.path.split(".").slice(0, -1).join(".")}_thumb.webp?${p.sas ? p.sas : ""}`;
    } else if (a instanceof MoulinetteSound) {
      res.url = a.getUrl(p);
    } else if (a instanceof MoulinetteText) {
      res.url = a.getUrl(p);
    } else {
      return null;
    }
    return res;
  }
  /**
   * Generates a View for this result
   */
  renderHTML(modal, containerEl) {
    const asset = containerEl.createEl("div", { cls: "asset" });
    switch (this.ref.constructor.name) {
      case "MoulinetteImage":
        asset.createEl("img").setAttribute("src", this.thumbUrl);
        break;
      case "MoulinetteSound":
        (0, import_obsidian3.setIcon)(asset.createDiv({ cls: "icon" }), "music");
        break;
      case "MoulinetteText":
        (0, import_obsidian3.setIcon)(asset.createDiv({ cls: "icon" }), "file-text");
        break;
    }
    const info = asset.createEl("div", { cls: "info" });
    info.createEl("div", { text: this.name, cls: "title" });
    info.createEl("div", { text: `${this.pack} (${this.creator})`, cls: "pack" });
    if (this.ref instanceof MoulinetteText) {
      if (this.ref.description) {
        info.createEl("div", { text: this.ref.description, cls: "desc" });
      }
      if (this.ref.type) {
        const tags = info.createDiv("meta");
        const typeVal = this.ref.type;
        tags.createEl("div", { text: typeVal, cls: "tag", title: "Type" }).addEventListener("click", (ev) => {
          ev.stopPropagation();
          modal.applyFilter("type", typeVal);
        });
        if (this.ref.subtype) {
          const subtypeVal = this.ref.subtype;
          tags.createEl("div", { text: subtypeVal, cls: "tag", title: "Subtype" }).addEventListener("click", (ev) => {
            ev.stopPropagation();
            modal.applyFilter("subtype", subtypeVal);
          });
        }
      }
    }
  }
};

// src/moulinette-search.ts
var import_obsidian4 = require("obsidian");
var _MoulinetteFilters = class {
  constructor(query) {
    this.assetType = _MoulinetteFilters.ASSET_TYPE_ANY;
    this.tags = [];
    this.terms = [];
    const terms = query.split(" ");
    for (const t of terms) {
      if (t.length == 0)
        continue;
      else if (t == "!")
        continue;
      else if (t == "!i" || t == "i!")
        this.assetType = _MoulinetteFilters.ASSET_TYPE_IMAGES;
      else if (t == "!s" || t == "s!")
        this.assetType = _MoulinetteFilters.ASSET_TYPE_SOUNDS;
      else if (t == "!t" || t == "t!")
        this.assetType = _MoulinetteFilters.ASSET_TYPE_TEXT;
      else if (t.startsWith("#")) {
        const tag = t.substring(1).split(":");
        if (tag.length == 2) {
          this.tags.push({ id: tag[0], value: tag[1] });
        }
      } else {
        this.terms.push(t);
      }
    }
  }
  matches(asset) {
    if (this.assetType == _MoulinetteFilters.ASSET_TYPE_IMAGES && !(asset instanceof MoulinetteImage))
      return false;
    if (this.assetType == _MoulinetteFilters.ASSET_TYPE_SOUNDS && !(asset instanceof MoulinetteSound))
      return false;
    if (this.assetType == _MoulinetteFilters.ASSET_TYPE_TEXT && !(asset instanceof MoulinetteText))
      return false;
    if (this.tags.length > 0) {
      if (!(asset instanceof MoulinetteText))
        return false;
      for (const t of this.tags) {
        if (t.id == "type" && asset.type != t.value)
          return false;
        if (t.id == "subtype" && asset.subtype != t.value)
          return false;
      }
    }
    for (const t of this.terms) {
      if (asset.path && asset.path.toLocaleLowerCase().indexOf(t.toLocaleLowerCase()) >= 0)
        continue;
      if (asset instanceof MoulinetteText && asset.description && asset.description.toLocaleLowerCase().indexOf(t.toLocaleLowerCase()) >= 0)
        continue;
      return false;
    }
    return true;
  }
};
var MoulinetteFilters = _MoulinetteFilters;
MoulinetteFilters.ASSET_TYPE_ANY = 0;
MoulinetteFilters.ASSET_TYPE_IMAGES = 1;
// "!i"
MoulinetteFilters.ASSET_TYPE_SOUNDS = 2;
// "!s"
MoulinetteFilters.ASSET_TYPE_TEXT = 3;
var _MoulinetteSearchModal = class extends import_obsidian4.SuggestModal {
  constructor(plugin, creators) {
    super(plugin.app);
    this.plugin = plugin;
    this.creators = creators;
  }
  // Returns all available suggestions.
  getSuggestions(query) {
    const filters = new MoulinetteFilters(query);
    const results = [];
    for (const c of this.creators) {
      for (const p of c.packs) {
        for (const a of p.assets) {
          if (filters.matches(a)) {
            const result = MoulinetteAssetResult.fromEntity(a, p, c);
            if (result) {
              results.push(result);
              if (results.length >= _MoulinetteSearchModal.MAX_RESULTS) {
                return results;
              }
            }
          }
        }
      }
    }
    return results;
  }
  // Renders each suggestion item.
  renderSuggestion(res, el) {
    res.renderHTML(this, el);
  }
  // Perform action on the selected suggestion.
  onChooseSuggestion(res, evt) {
    if (res.url.startsWith(MoulinetteClient.REMOTE_BASE)) {
      MoulinetteUtils.downloadFile(this.plugin.app.vault, res.url).then((imgPath) => {
        const view = this.plugin.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
        if (imgPath && view) {
          view.editor.replaceSelection(`![[${imgPath}]]`);
        } else {
          navigator.clipboard.writeText(`![[${imgPath}]]`).then(() => {
            new import_obsidian4.Notice("No active view. Path copied into clipboard");
          }).catch(() => {
            new import_obsidian4.Notice("No active view AND cannot write into clipboard");
          });
        }
      });
    } else {
      MoulinetteUtils.downloadMarkdown(this.plugin, res.url).then((mdText) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
        if (mdText && view) {
          view.editor.replaceSelection(mdText);
        } else {
          navigator.clipboard.writeText(mdText).then(() => {
            new import_obsidian4.Notice("No active view. Text copied into clipboard");
          }).catch(() => {
            new import_obsidian4.Notice("No active view AND cannot write into clipboard");
          });
        }
      });
    }
  }
  applyFilter(tagName, tagValue) {
    const query = this.inputEl.value;
    const idx = query.indexOf(`#${tagName}:`);
    if (idx >= 0) {
      let newQuery = query.substring(0, idx) + `#${tagName}:${tagValue}`;
      const idE = query.indexOf(" ", idx + 1);
      if (idE >= 0) {
        newQuery += query.substring(idE);
      }
    } else {
      this.inputEl.setRangeText(` #${tagName}:${tagValue}`);
    }
    this.inputEl.selectionStart = this.inputEl.selectionEnd = this.inputEl.value.length;
    this.inputEl.dispatchEvent(new Event("input", { bubbles: true }));
  }
};
var MoulinetteSearchModal = _MoulinetteSearchModal;
MoulinetteSearchModal.MAX_RESULTS = 100;

// src/moulinette-settings.ts
var import_obsidian5 = require("obsidian");
var import_obsidian6 = require("obsidian");
var import_crypto = require("crypto");
var MoulinetteSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.intervalRef = 0;
    this.intervalIter = 0;
  }
  /**
   * Extra cleanup : make sure no authentication in progress
   */
  hide() {
    if (this.intervalRef) {
      window.clearInterval(this.intervalRef);
    }
    this.warn.removeClass("visible");
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian5.Setting(containerEl).setName("Download folder").setDesc("Name of the directory where the files will be downloaded.").addText((text) => text.setPlaceholder("moulinette").setValue(this.plugin.settings.downloadFolder).onChange(async (value) => {
      this.plugin.settings.downloadFolder = value && value.length > 0 ? value : "moulinette";
      MoulinetteUtils.PREFIX = this.plugin.settings.downloadFolder + "/";
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Moulinette Cloud integration").setHeading();
    this.refreshCloudIntegration(containerEl.createDiv({ cls: "setting-item" }));
    const refreshSetting = containerEl.createDiv({ cls: "setting-item" });
    const authInfo = refreshSetting.createDiv({ cls: "setting-item-info" });
    authInfo.createDiv({ cls: "setting-item-name", text: `Refresh assets` });
    authInfo.createDiv({ cls: "setting-item-description", text: "The list of assets you have access to is cached. Click the 'Refresh' button to force a data refresh without the need to restart Obsidian." });
    const actions = refreshSetting.createDiv({ cls: "setting-item-control" }).createDiv("actions");
    const refreshButton = new import_obsidian5.ButtonComponent(actions).setButtonText("Refresh").onClick(async () => {
      refreshButton.setButtonText("\u2713 refreshed!");
      refreshButton.setDisabled(true);
      refreshButton.setClass("success");
      this.plugin.clearCache();
    });
  }
  /**
   * Updates the cloud integration settings section
   * 
   * @param settingDIV DIV element to update
   */
  async refreshCloudIntegration(settingDIV, force = false) {
    settingDIV.empty();
    const authInfo = settingDIV.createDiv({ cls: "setting-item-info" });
    if (this.plugin.settings.sessionID && this.plugin.settings.sessionID.length == 26) {
      const user = await MoulinetteClient.getUser(this.plugin.settings.sessionID, force);
      if (user && user.status == 200) {
        if (user.data.guid) {
          this.plugin.settings.sessionID = user.data.guid;
          await this.plugin.saveSettings();
          delete user.data.guid;
        }
        if (user.data.patron) {
          authInfo.createDiv({ cls: "setting-item-name", text: `Authenticated as '${user.data.fullName}' (#${user.data.id}) and supporting Moulinette \u2665` });
          const descr = authInfo.createDiv({ cls: "setting-item-description" });
          descr.createSpan({ text: "Tiers :" });
          const ul = descr.createEl("ul");
          for (const pledge of user.data.pledges) {
            const li = ul.createEl("li");
            li.createDiv({ text: `${pledge.vanity}: ${pledge.pledge}` });
          }
          const authCtrl = settingDIV.createDiv({ cls: "setting-item-control" });
          const actions = authCtrl.createDiv("actions");
          new import_obsidian5.ButtonComponent(actions).setButtonText("Refresh tiers").onClick(async () => {
            this.plugin.clearCache();
            this.refreshCloudIntegration(settingDIV, true);
          });
          new import_obsidian5.ButtonComponent(actions).setButtonText("Logout").onClick(async () => {
            this.plugin.settings.sessionID = "";
            await this.plugin.saveSettings();
            this.plugin.clearCache();
            this.refreshCloudIntegration(settingDIV);
          });
        } else {
          authInfo.createDiv({ cls: "setting-item-name", text: `Authenticated as '${user.data.fullName}' (#${user.data.id}), not a Moulinette member` });
          const descr = authInfo.createDiv({ cls: "setting-item-description" });
          descr.createSpan({ text: "Moulinette support is required for accessing cloud features. Nevertheless, you can still utilize the module with the available demo data." });
          const actions = settingDIV.createDiv({ cls: "setting-item-control" }).createDiv("actions");
          new import_obsidian5.ButtonComponent(actions).setButtonText("Join Moulinette").onClick(async () => {
            window.open("https://www.patreon.com/join/moulinette", "_blank");
          });
          new import_obsidian5.ButtonComponent(actions).setButtonText("Refresh tiers").onClick(async () => {
            this.plugin.clearCache();
            this.refreshCloudIntegration(settingDIV, true);
          });
          new import_obsidian5.ButtonComponent(actions).setButtonText("Logout").onClick(async () => {
            this.plugin.settings.sessionID = "";
            this.plugin.clearCache();
            await this.plugin.saveSettings();
            this.refreshCloudIntegration(settingDIV);
          });
        }
      }
    } else {
      const newGUID = (0, import_crypto.randomUUID)().replace(/-/g, "").substring(0, 26);
      const callback = `${MoulinetteClient.SERVER_URL}/patreon/callback`;
      const patreonURL = `https://www.patreon.com/oauth2/authorize?response_type=code&client_id=${MoulinetteClient.CLIENT_ID}&redirect_uri=${callback}&scope=identity identity.memberships&state=${newGUID}`;
      authInfo.createDiv({ cls: "setting-item-name", text: "Your Vault is not linked to Moulinette yet" });
      const descr = authInfo.createDiv({ cls: "setting-item-description" });
      descr.createEl("span", { text: "By linking your Vault to Moulinette, you will be able to easily search and download content from creators and communities. " });
      descr.createEl("a", { href: "https://www.moulinette.cloud/", text: "Learn more about Moulinette" });
      this.warn = descr.createDiv({ cls: "setting-warning", text: "Authentication in progress in your web browser. You have 2 minutes to complete the process!" });
      const authCtrl = settingDIV.createDiv({ cls: "setting-item-control" });
      const button = new import_obsidian5.ButtonComponent(authCtrl.createDiv("actions")).setButtonText("Authenticate").onClick(async () => {
        window.open(patreonURL, "_blank");
        this.warn.addClass("visible");
        this.intervalIter = 120;
        this.intervalRef = window.setInterval(async () => {
          if (this.intervalIter <= 0) {
            button.setButtonText(`Retry`);
            return window.clearInterval(this.intervalRef);
          }
          this.intervalIter--;
          button.setButtonText(`${this.intervalIter} sec`);
          if (this.intervalIter % 2) {
            const ready = await MoulinetteClient.get(`/user/${newGUID}/ready?patreon=1`);
            if (ready && ready.status == 200 && ready.data.status == "yes") {
              window.clearInterval(this.intervalRef);
              this.plugin.settings.sessionID = newGUID;
              await this.plugin.saveSettings();
              this.plugin.clearCache();
              this.refreshCloudIntegration(settingDIV);
            }
          }
        }, 1e3);
      });
    }
  }
};

// src/moulinette-browser.ts
var import_obsidian7 = require("obsidian");
var MoulinetteBrowserFilters = class {
  constructor() {
    this.creator = -1;
    this.packs = [];
    this.type = 0;
    this.terms = "";
  }
};
var _MoulinetteBrowser = class extends import_obsidian7.Modal {
  // timer to delay keyup event
  constructor(plugin, creators, filters) {
    super(plugin.app);
    this.plugin = plugin;
    this.creators = creators.sort((a, b) => a.name.toLocaleLowerCase().localeCompare(b.name.toLocaleLowerCase()));
    this.filters = filters ? filters : new MoulinetteBrowserFilters();
    this.keyUpTimerRef = 0;
  }
  onOpen() {
    var _a;
    let { contentEl } = this;
    (_a = contentEl.parentElement) == null ? void 0 : _a.addClass("browser");
    const headerEl = contentEl.createEl("div", { cls: "searchbar" });
    const searchEl = headerEl.createEl("input", { value: this.filters.terms, placeholder: "Search ..." });
    searchEl.addEventListener("keyup", () => {
      if (this.keyUpTimerRef)
        window.clearTimeout(this.keyUpTimerRef);
      this.keyUpTimerRef = window.setTimeout(() => {
        this.filters.terms = searchEl.value;
        this.updateData(true);
      }, _MoulinetteBrowser.SEARCH_DELAY);
    });
    const creatorsEl = headerEl.createEl("select", {});
    creatorsEl.createEl("option", { value: "-1", text: `-- Creators --` });
    this.creators.forEach((c, idx) => {
      const count = c.packs.reduce((acc, objet) => acc + objet.assets.length, 0);
      const option = creatorsEl.createEl("option", { value: "" + idx, text: `${c.name} (${count.toLocaleString()})` });
      if (this.filters.creator == idx) {
        option.setAttribute("selected", "selected");
      }
    });
    const packsEl = headerEl.createEl("select", {});
    packsEl.createEl("option", { value: "", text: `-- Pack --` });
    creatorsEl.addEventListener("change", (ev) => {
      this.filters.creator = Number(ev.target.value);
      this.filters.packs = [];
      this.onSelectCreator(packsEl);
      this.updateData(true);
    });
    packsEl.addEventListener("change", (ev) => {
      const selPacksValue = ev.target.value;
      this.filters.packs = selPacksValue.length == 0 ? [] : selPacksValue.split(",").map(function(item) {
        return parseInt(item, 10);
      });
      this.updateData(true);
    });
    const imageButton = headerEl.createEl("button", { cls: this.filters.type == MoulinetteAsset.TYPE_IMAGE ? "highlight" : "" });
    (0, import_obsidian7.setIcon)(imageButton, "image");
    const audioButton = headerEl.createEl("button", { cls: this.filters.type == MoulinetteAsset.TYPE_AUDIO ? "highlight" : "" });
    (0, import_obsidian7.setIcon)(audioButton, "music");
    const mdButton = headerEl.createEl("button", { cls: this.filters.type == MoulinetteAsset.TYPE_TEXT ? "highlight" : "" });
    (0, import_obsidian7.setIcon)(mdButton, "file-text");
    imageButton.addEventListener("click", (ev) => this.applyTypeFilter(MoulinetteAsset.TYPE_IMAGE, imageButton, audioButton, mdButton));
    audioButton.addEventListener("click", (ev) => this.applyTypeFilter(MoulinetteAsset.TYPE_AUDIO, imageButton, audioButton, mdButton));
    mdButton.addEventListener("click", (ev) => this.applyTypeFilter(MoulinetteAsset.TYPE_TEXT, imageButton, audioButton, mdButton));
    this.assetsEl = contentEl.createDiv("assets");
    this.assetsEl.addEventListener("scroll", (ev) => {
      if (this.ignoreScroll)
        return;
      const bottom = this.assetsEl.scrollHeight - this.assetsEl.scrollTop;
      const height = this.assetsEl.clientHeight;
      if (bottom - 20 < height) {
        this.ignoreScroll = true;
        if (this.page >= 0) {
          this.page++;
          this.updateData(false);
        }
        this.ignoreScroll = false;
      }
    });
    const footer = contentEl.createDiv({ cls: "footer" });
    const icon = footer.createDiv("div");
    (0, import_obsidian7.setIcon)(icon, "info");
    footer.createSpan({ text: "Hold CTRL/Command key to download multiple assets." });
    this.onSelectCreator(packsEl);
    this.updateData(true);
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
    this.plugin.lastFilters = this.filters;
    if (this.keyUpTimerRef)
      window.clearTimeout(this.keyUpTimerRef);
  }
  /**
   * Updates the packs list
   * @param packsEl HTML select list
   */
  onSelectCreator(packsEl) {
    packsEl.empty();
    packsEl.createEl("option", { value: "", text: `-- Packs --` });
    if (this.filters.creator >= 0) {
      const packs = MoulinetteUtils.combinePacks(this.creators[this.filters.creator].packs);
      const sortedNames = Object.keys(packs).sort((a, b) => a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase()));
      const selected = this.filters.packs.join();
      for (const sn of sortedNames) {
        const values = packs[sn].map((p) => p.id).join();
        const count = packs[sn].reduce((acc, cur) => acc + cur.assets.length, 0);
        const option = packsEl.createEl("option", { value: values, text: `${sn} (${count.toLocaleString()})` });
        if (selected == values) {
          option.setAttribute("selected", "selected");
        }
      }
    }
  }
  applyTypeFilter(type, imageButton, audioButton, mdButton) {
    this.filters.type = this.filters.type == type ? 0 : type;
    if (this.filters.type == MoulinetteAsset.TYPE_IMAGE) {
      imageButton.addClass("highlight");
    } else {
      imageButton.removeClass("highlight");
    }
    if (this.filters.type == MoulinetteAsset.TYPE_AUDIO) {
      audioButton.addClass("highlight");
    } else {
      audioButton.removeClass("highlight");
    }
    if (this.filters.type == MoulinetteAsset.TYPE_TEXT) {
      mdButton.addClass("highlight");
    } else {
      mdButton.removeClass("highlight");
    }
    this.updateData(true);
  }
  generateAssetHTML(pack, asset, assetId) {
    var _a;
    if (asset instanceof MoulinetteImage) {
      const url = `${pack.path}/${asset.path}`.replace(".webp", "_thumb.webp") + (pack.sas ? "?" + pack.sas : "");
      const thumb = this.assetsEl.createEl("img");
      thumb.setAttribute("src", url);
      thumb.setAttribute("title", asset.path);
      thumb.addEventListener("click", (ev) => {
        const assetURL = `${pack.path}/${asset.path}?` + (pack.sas ? pack.sas : "");
        MoulinetteUtils.downloadFile(this.app.vault, assetURL).then((imgPath) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
          if (imgPath && view) {
            view.editor.replaceSelection(`![[${imgPath}]]`);
          } else {
            navigator.clipboard.writeText(`![[${imgPath}]]`).then(() => {
              new import_obsidian7.Notice("No active view. Path copied into clipboard");
            }).catch(() => {
              new import_obsidian7.Notice("No active view AND cannot write into clipboard");
            });
          }
          if (!ev.ctrlKey) {
            this.close();
          } else {
            new import_obsidian7.Notice(`Image ${imgPath == null ? void 0 : imgPath.split("/").pop()} downloaded`);
          }
        });
      });
    } else if (asset instanceof MoulinetteSound) {
      const assetEl = this.assetsEl.createDiv({ cls: "snd" });
      assetEl.setAttribute("title", asset.path);
      const thumb = assetEl.createDiv();
      (0, import_obsidian7.setIcon)(thumb, "music");
      const filename = (_a = asset.path.split("/").pop()) == null ? void 0 : _a.split(".")[0];
      assetEl.createEl("div", { cls: "dur", text: MoulinetteUtils.formatDuration(asset.duration) });
      assetEl.createEl("div", { text: filename });
      assetEl.addEventListener("click", (ev) => {
        const assetURL = asset.getUrl(pack);
        MoulinetteUtils.downloadFile(this.app.vault, assetURL).then((sndPath) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
          if (sndPath && view) {
            view.editor.replaceSelection(`![[${sndPath}]]`);
          } else {
            navigator.clipboard.writeText(`![[${sndPath}]]`).then(() => {
              new import_obsidian7.Notice("No active view. Path copied into clipboard");
            }).catch(() => {
              new import_obsidian7.Notice("No active view AND cannot write into clipboard");
            });
          }
          if (!ev.ctrlKey) {
            this.close();
          } else {
            new import_obsidian7.Notice(`Sound ${sndPath == null ? void 0 : sndPath.split("/").pop()} downloaded`);
          }
        });
      });
    } else if (asset instanceof MoulinetteText) {
      const assetEl = this.assetsEl.createDiv({ cls: "md" });
      assetEl.setAttribute("title", asset.path);
      const thumb = assetEl.createDiv();
      (0, import_obsidian7.setIcon)(thumb, "file-text");
      const filename = asset.path.split("/").pop();
      assetEl.createEl("div", { text: (filename == null ? void 0 : filename.endsWith(".md")) ? filename.slice(0, -3) : filename });
      assetEl.addEventListener("click", (ev) => {
        const assetURL = asset.getUrl(pack);
        MoulinetteUtils.downloadMarkdown(this.plugin, assetURL).then((mdText) => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
          if (mdText && view) {
            view.editor.replaceSelection(mdText);
          } else {
            navigator.clipboard.writeText(mdText).then(() => {
              new import_obsidian7.Notice("No active view. Text copied into clipboard");
            }).catch(() => {
              new import_obsidian7.Notice("No active view AND cannot write into clipboard");
            });
          }
          if (!ev.ctrlKey) {
            this.close();
          } else {
            new import_obsidian7.Notice(`Text ${asset.path} downloaded`);
          }
        });
      });
    }
  }
  updateData(clear) {
    if (clear) {
      this.assetsEl.empty();
      this.page = 0;
    }
    let assetIdx = 0;
    let noAddition = true;
    const terms = this.filters.terms.length > 0 ? this.filters.terms.toLocaleLowerCase().split(" ") : null;
    const creators = this.filters.creator >= 0 ? [this.creators[this.filters.creator]] : this.creators;
    for (const c of creators) {
      for (const p of c.packs) {
        if (this.filters.packs.length > 0 && !this.filters.packs.includes(p.id))
          continue;
        let assets = p.assets;
        if (this.filters.type) {
          assets = assets.filter((a) => this.filters.type == a.getType());
        }
        if (terms) {
          assets = assets.filter((a) => terms.filter((t) => a.path.toLocaleLowerCase().indexOf(t) >= 0).length == terms.length);
          assets.forEach((a, idx) => {
            if (assetIdx >= _MoulinetteBrowser.MAX_ASSETS * this.page && assetIdx < (this.page + 1) * _MoulinetteBrowser.MAX_ASSETS) {
              this.generateAssetHTML(p, a, idx);
              noAddition = false;
            }
            assetIdx++;
          });
        } else {
          assets.forEach((a, idx) => {
            if (assetIdx >= _MoulinetteBrowser.MAX_ASSETS * this.page && assetIdx < (this.page + 1) * _MoulinetteBrowser.MAX_ASSETS) {
              this.generateAssetHTML(p, a, idx);
              noAddition = false;
            }
            assetIdx++;
          });
        }
      }
    }
    if (noAddition) {
      this.page = -1;
    }
    if (assetIdx == 0) {
      this.assetsEl.createDiv({ text: "No results round" });
    }
  }
};
var MoulinetteBrowser = _MoulinetteBrowser;
MoulinetteBrowser.MAX_ASSETS = 100;
MoulinetteBrowser.SEARCH_DELAY = 600;

// src/moulinette-progress.ts
var import_obsidian8 = require("obsidian");
var MoulinetteProgress = class extends import_obsidian8.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    var _a;
    let { contentEl } = this;
    (_a = contentEl.parentElement) == null ? void 0 : _a.addClass("progress");
    contentEl.addClass("message");
    const icon = contentEl.createDiv("div");
    (0, import_obsidian8.setIcon)(icon, "hourglass");
    contentEl.createDiv({ text: "Downloading Moulinette's index... please wait!" });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  sessionID: "",
  downloadFolder: "moulinette"
};
var _MoulinettePlugin = class extends import_obsidian9.Plugin {
  // last-used filters
  async onload() {
    await this.loadSettings();
    this.lastFilters = new MoulinetteBrowserFilters();
    this.registerEvent(this.app.vault.on("create", async (file) => {
      this.downloadPage(file);
    }));
    MoulinetteUtils.PREFIX = this.settings.downloadFolder + "/";
    this.addRibbonIcon("hammer", "Moulinette Browser", (evt) => {
      this.getCreators().then((creators) => new MoulinetteBrowser(this, creators, this.lastFilters).open());
    });
    this.addCommand({
      id: "browser",
      name: "Open Moulinette Browser",
      //hotkeys: [{ key: 'M', modifiers: ['Ctrl', 'Shift'] }],
      callback: () => {
        this.getCreators().then((creators) => new MoulinetteBrowser(this, creators, this.lastFilters).open());
      }
    });
    this.addCommand({
      id: "clear-cache",
      name: "Clear cache",
      callback: () => {
        this.clearCache();
      }
    });
    this.addCommand({
      id: "reload-page",
      name: "Re-download page",
      callback: () => {
        const curView = this.app.workspace.getActiveViewOfType(import_obsidian9.MarkdownView);
        if (curView && curView.file) {
          const lastline = curView.editor.lastLine();
          const lastCh = curView.editor.getLine(lastline).length;
          curView.editor.setSelection({ line: 0, ch: 0 }, { line: lastline, ch: lastCh });
          this.downloadPage(curView.file);
        }
      }
    });
    this.addCommand({
      id: "search",
      name: "Open Quick Search",
      //hotkeys: [{ key: 'M', modifiers: ['Ctrl'] }],
      callback: () => {
        this.getCreators().then((creators) => new MoulinetteSearchModal(this, creators).open());
      }
    });
    this.addSettingTab(new MoulinetteSettingTab(this.app, this));
    this.registerMarkdownPostProcessor((element, ctx) => {
      const targetLinks = Array.from(element.getElementsByTagName("img"));
      for (const link of targetLinks) {
        let clean_link = link.src.replace("app://obsidian.md/", "").replace("capacitor://localhost/", "");
        let full_link = this.app.vault.adapter.getResourcePath(clean_link);
        link.src = full_link;
      }
    });
  }
  onunload() {
    this.clearCache();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * @returns list of assets
   */
  async getCreators() {
    const start = Date.now();
    if (this.creators && start - this.creatorsDate < _MoulinettePlugin.CACHE_TIMEOUT) {
      return this.creators;
    } else {
      const progress = new MoulinetteProgress(this.app);
      progress.open();
      this.creators = await MoulinetteClient.getUserAssets(this.settings.sessionID);
      progress.close();
      this.creatorsDate = start;
      return this.creators;
    }
  }
  /**
   * clear all caches
   */
  clearCache() {
    this.creators = [];
    this.creatorsDate = 0;
    new import_obsidian9.Notice("Moulinette Cache cleared!");
  }
  /**
   * download file from server (if exists)
   */
  async downloadPage(file) {
    if (file.name.endsWith(".md") && file.path.startsWith(MoulinetteUtils.PREFIX)) {
      const packId = file.path.split("/")[1];
      const creators = await this.getCreators();
      for (const c of creators) {
        const pack = c.packs.find((p) => p.packId == packId);
        const filepath = file.path.replace(MoulinetteUtils.PREFIX, "");
        if (pack) {
          const a = pack.assets.find((a2) => a2.path == filepath);
          if (a) {
            const sessionId = this.settings.sessionID ? this.settings.sessionID : "demo-user";
            const url = `/assets/download-asset/${sessionId}/${pack.id}?file=${a.path}&ms=${new Date().getTime()}`;
            MoulinetteUtils.downloadMarkdown(this, url).then((mdText) => {
              const view = this.app.workspace.getActiveViewOfType(import_obsidian9.MarkdownView);
              if (mdText && view) {
                view.editor.replaceSelection(mdText);
              }
            });
            break;
          } else {
            new import_obsidian9.Notice(`No Moulinette match found for ${file.name}!`);
          }
        }
      }
    }
  }
};
var MoulinettePlugin = _MoulinettePlugin;
MoulinettePlugin.CACHE_TIMEOUT = 1e3 * 60 * 60 * 23;
//# sourceMappingURL=data:application/json;base64,
